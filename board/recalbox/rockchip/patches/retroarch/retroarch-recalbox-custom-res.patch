Mrfixit: This patch will make retroarch search for the custom resolution as it's preferred mode, rather than always using the first (and highest) mode... which on the Rockchip is often 4k, depending on the connected monitor/tv.
If this mode isn't found, then it's likely that the currently connected display doesn't support it. In which case, the first listed mode will still be selected, as it's the highest available and is probably less anyways.
--- a/gfx/drivers_context/drm_ctx.c	2018-07-13 06:20:55.000000000 -0400
+++ b/gfx/drivers_context/drm_ctx.c	2018-08-05 21:38:34.156727316 -0400
@@ -75,6 +75,8 @@
 
 static bool waiting_for_flip              = false;
 
+int resX = 0, resY = 0;
+
 typedef struct gfx_ctx_drm_data
 {
 #ifdef HAVE_EGL
@@ -343,6 +345,33 @@
    g_next_bo           = NULL;
 }
 
+static void getResFromConfig() {
+   if ( resX != 0 || resY != 0 )
+      return NULL;
+
+   char *x, *y, res[10], *value;
+   char * resArray;
+   FILE *fp;
+   int respart = 1;
+   fp = popen("/usr/bin/python /usr/lib/python2.7/site-packages/configgen/settings/recalboxSettings.pyc -command load -key retroarch.resolution", "r");
+   if (fp != NULL) {
+      fgets(res, sizeof(res)-1, fp);
+      pclose(fp);
+      if (res != NULL) {
+         value = strdup(res);
+         x = strtok(value,"x");
+         y = strtok(NULL, "x");
+      }
+   }
+   if ( x == NULL || y == NULL ) {
+      x = "800";
+      y = "600";
+   }
+   resX = atoi(x);
+   resY = atoi(y);
+   printf("REQUESTING RESOLUTION: %dx%d\n", resX, resY);
+}
+
 static void *gfx_ctx_drm_init(video_frame_info_t *video_info, void *video_driver)
 {
    int fd, i;
@@ -389,10 +391,23 @@
 
    drm_setup(fd);
 
-   /* First mode is assumed to be the "optimal"
-    * one for get_video_size() purposes. */
-   drm->fb_width    = g_drm_connector->modes[0].hdisplay;
-   drm->fb_height   = g_drm_connector->modes[0].vdisplay;
+   /* Stock Retroarch assumes the first mode [0]
+    * to be "optimal", but it's just the "highest".
+    * For rockchip, the "optimal" emulation can be set inside recalbox.conf,
+    * so let's search for that setting. */
+   int modenum = 0;
+   getResFromConfig();
+   for (i = 0; i < g_drm_connector->count_modes; i++)
+   {
+      if (g_drm_connector->modes[i].hdisplay == resX && g_drm_connector->modes[i].vdisplay == resY && g_drm_connector->modes[i].vrefresh <= 61)
+      {
+         modenum = i;
+         break;
+      }
+   }
+
+   drm->fb_width    = g_drm_connector->modes[modenum].hdisplay;
+   drm->fb_height   = g_drm_connector->modes[modenum].vdisplay;
 
    drmSetMaster(g_drm_fd);
 
@@ -631,8 +649,20 @@
    /* Find desired video mode, and use that.
     * If not fullscreen, we get desired windowed size,
     * which is not appropriate. */
    if ((width == 0 && height == 0) || !fullscreen)
+   {
+      getResFromConfig();
+      int modenum = 0;
+      for (i = 0; i < g_drm_connector->count_modes; i++)
+      {
+         if (g_drm_connector->modes[i].hdisplay == resX && g_drm_connector->modes[i].vdisplay == resY && g_drm_connector->modes[i].vrefresh <= 61)
+         {
+            modenum = i;
+            break;
+         }
+      }
-      g_drm_mode = &g_drm_connector->modes[0];
+      g_drm_mode = &g_drm_connector->modes[modenum];
+   }
    else
    {
       /* Try to match refresh_rate as closely as possible.
